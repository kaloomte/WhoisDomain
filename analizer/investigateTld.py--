#! /usr/bin/env python3

# should run after a valid database is created with analizeIanaTld.py

from typing import (
    Dict,
    Any,
    List,
    Tuple,
)

import re
import sys

import idna as idna2

from ianaDatabase import IanaDatabase

# the next 2 belong together
sys.path.append("..")
from whoisdomain.tldDb import tld_regexpr

MM = {
    "com": [
        "whois.afilias-srs.net",
        "whois2.afilias-grs.net",
        "whois.nic.google",
        "whois.nic.gmo",
        "whois.gtld.knet.cn",
        "whois.registry.in",
        "whois.ngtld.cn",
    ],
    "sg": [
        "whois.sgnic.sg",
    ],
    "_teleinfo": [
        "whois.teleinfo.cn",
    ],
    "tw": [
        "whois.twnic.net.tw",
    ],
    "_centralnic": [
        "whois.centralnic.com",
    ],
}

def extractServers(aDict: Dict[str, Any]) -> Dict[str, Any]:
    servers: Dict[str, Any] = {}
    k = "_server"
    for key in aDict.keys():
        if k in aDict[key]:
            server = aDict[key][k]
            if server not in servers:
                servers[server] = []
            servers[server].append(key)
    return servers


def getAllDataTld(iad: Any) -> Tuple[Any, Any]:
    # investigate all known iana tld and see if we have them

    sql = """
SELECT
    Link,
    Domain,
    Type,
    TLD_Manager,
    Whois,
    `DnsResolve-A`,
    RegistrationUrl
FROM
    IANA_TLD
"""

    result, cursor = iad.selectSql(sql)
    return result, cursor


def _normalizeRow(row: Any) -> Tuple[str, str, str, str, str, str, str, str]:
    tld = row[0].replace("'", "")

    tld2 = "".join(map(lambda s: s and re.sub(r"[^\w\s]", "", s), row[1]))

    tld3 = row[1].replace(".", "").replace("'", "").replace("\u200f", "").replace("\u200e", "")
    tld4 = tld3

    manager = row[3]
    w = row[4].replace("'", "")
    resolve = row[5]
    reg = row[6]

    return tld, tld2, tld3, tld4, manager, w, resolve, reg


def _doCentralNic(tld: str, s1: str, w: str, TLD: Dict[str, Any]) -> bool:
    return True

    kk = "_centralnic"
    if s1 == w and "extend" in TLD and TLD["extend"] in [kk, "com"]:
        return True

    s = f"ZZ['{tld}']" + ' = {"extend": ' + f"{kk}, " + '"_server":' + f'"{w}"' + "} # < suggest ### "

    if "extend" in TLD:
        print(s, "# current > ", s1, w, TLD["extend"], TLD)
    else:
        print(s, "# current > ", s1, w, "_no_extend_", TLD)

    return True


def _doDonuts(tld: str, s1: str, w: str, TLD: Dict[str, Any]) -> bool:
    # currently not used
    return True
    kk = "_donuts"
    if s1 == w and "extend" in TLD and TLD["extend"] in [kk, "com"]:
        return True

    s = f"ZZ['{tld}']" + ' = {"extend": ' + f"{kk}, " + '"_server":' + f'"{w}"' + "} # suggest ### "

    if "extend" in TLD:
        print(s, "# current ", s1, w, TLD["extend"], TLD)
    else:
        print(s, "# current ", s1, w, "_no_extend_", TLD)

    return True

class OneTld():
    verbose: bool = True
    row: Any = None
    allTld: Dict[str,Any] = {}
    ss: List[str] = []
    tld = None
    tld2 = None
    tld3 = None
    tld4 = None

    manager = None
    w = None
    resolve = None
    reg    = NOne

    def __init__(self, verbose:bool = False,)
        self.verbose = verbose

    def _normalizeRow(self) -> None:
        self.tld = self.row[0].replace("'", "")
        self.tld2 = "".join(map(lambda s: s and re.sub(r"[^\w\s]", "", s), self.row[1]))
        self.tld3 = self.row[1].replace(".", "").replace("'", "").replace("\u200f", "").replace("\u200e", "")
        self.tld4 = self.tld3

        self.manager = self.row[3]
        self.w = self.row[4].replace("'", "")
        self.resolve = self.row[5]
        self.reg = self.row[6]

    def _doCentralNic(s1: str, TLD: Dict[str, Any]) -> bool:
        return True

        kk = "_centralnic"
        if s1 == w and "extend" in TLD and TLD["extend"] in [kk, "com"]:
            return True

        s = f"ZZ['{self.tld}']" + ' = {"extend": ' + f"{kk}, " + '"_server":' + f'"{self.w}"' + "} # < suggest ### "

        if "extend" in TLD:
            print(s, "# current > ", s1, self.w, TLD["extend"], TLD)
        else:
            print(s, "# current > ", s1, self.w, "_no_extend_", TLD)

        return True


    def _doDonuts(s1: str, TLD: Dict[str, Any]) -> bool:
        # currently not used
        return True

        kk = "_donuts"
        if s1 == self.w and "extend" in TLD and TLD["extend"] in [kk, "com"]:
            return True

        s = f"ZZ['{self.tld}']" + ' = {"extend": ' + f"{kk}, " + '"_server":' + f'"{self.w}"' + "} # suggest ### "

        if "extend" in TLD:
            print(s, "# current ", s1, self.w, TLD["extend"], TLD)
        else:
            print(s, "# current ", s1, self.w, "_no_extend_", TLD)

        return True

    def processRow(row: Any, allTld: Dict[str,Any], ss:List[str],):
        self.row = row
        self.allTld = allTld
        self.ss = ss

        self._normalizeRow()
        if self.tld not in self.allTld:
            self.allTld.append(self.tld)

        # look for a whois server in iana with a different or no server in the list
        if not self.w or self.w == "NULL":
            # we can create a privateRegistry when there is no whois server
            if self.tld not in tld_regexpr.ZZ:
                print(f'ZZ["{self.tld}"] = ' + '{"_privateRegistry": True} # no whois server found in iana')
            return

        if self.tld not in tld_regexpr.ZZ:
            print(f"# unknown tld {self.tld}, {self.tld2}, {self.tld3}, {self.tld4}, {self.w},")
            return

        k = "_server"
        s1 = ""

        TLD = tld_regexpr.ZZ[self.tld]
        if k in TLD:
            s1 = TLD[k]

        if "whois.centralnicregistry.com." in self.resolve and self._doCentralNic(s1, TLD):
            return

        if "whois.donuts.co" in self.resolve and self._doCentralNic( s1, TLD):
            return

        try:
            self.tld3 = idna2.encode(self.tld3).decode() or self.tld3
        except Exception as e:
            print(f"## {self.tld} {self.tld2} {self.tld3} {e}")
            return

        self.tld4 = self.tld4.encode("idna").decode()
        if self.tld != self.tld2:
            if 0 and self.tld2 not in self.ss:
                print("# idna", self.tld, self.tld2, self.tld3, self.tld4, self.tld.encode("idna"))

        if self.tld != self.tld3:
            print(f"#SKIP {self.tld} {self.tld2} {self.tld3}")
            return

        if self.tld2 == self.tld and self.tld in tld_regexpr.ZZ:
            return

        if self.tld2 in tld_regexpr.ZZ and self.tld in tld_regexpr.ZZ:
            return


        if self.manager == "NULL":
            if self.tld not in tld_regexpr.ZZ:
                print(f'ZZ["{self.tld}"] = ' + '{"_privateRegistry": True}')

            if self.tld2 != self.tld:
                if self.tld2 not in tld_regexpr.ZZ:
                    print(f'ZZ["{self.tld2}"] = ' + '{"_privateRegistry": True}')

            return

        found = False
        for key, value in MM.items():
            for n in value:
                if n in self.resolve:
                    if self.tld not in tld_regexpr.ZZ:
                        print(f'ZZ["{self.tld}"] = ' + '{"_server": "' + n + '", "extend": "' + key + '"}')
                    if self.tld2 != self.tld:
                        if self.tld2 not in tld_regexpr.ZZ:
                            print(f'ZZ["{self.tld2}"] = ' + '{"_server": "' + n + '", "extend": "' + key + '"}')
                    found = True

                if found:
                    break
            if found:
                break

        if found:
            return

        if self.reg == "NULL" and self.w == "NULL":
            return  # unclear,
            # we have existing ns records indicating some self.tld's actually exist
            # but have no whois, lets skip for now
            # TODO add ns records
            if self.tld not in tld_regexpr.ZZ:
                print(f'ZZ["{self.tld}"] = ' + '{"_privateRegistry": True}')

        if self.w == "NULL":
            return

        self.w = self.w.replace("'", "")
        if self.w in self.ss:
            if self.tld not in tld_regexpr.ZZ:
                print(
                    f'ZZ["{self.tld}"] = ' + '{"_server": "' + self.w + '", "extend": "' + self.ss[self.w][0] + '"}',
                    "# ",
                    self.w,
                    self.ss[self.w],
                )

            if self.tld2 != self.tld:
                if self.tld2 not in tld_regexpr.ZZ:
                    print(
                        f'ZZ["{self.tld2}"] = ' + '{"_server": "' + self.w + '", "extend": "' + self.ss[self.w][0] + '"}',
                        "# ",
                        self.w,
                        self.ss[self.w],
                    )
            return

        print("# MISSING", self.tld, self.tld2, self.tld3, self.manager.replace("\n", ";"), self.w, self.resolve, self.reg)


def doOneRow(
    row: Any,
    allTld: List[str],
    ss: Dict[str, Any],
    verbose: bool = False,
):
    if verbose:
        print(row, file=sys.stderr)

    tld, tld2, tld3, tld4, manager, w, resolve, reg = _normalizeRow(row)
    if tld not in allTld:
        allTld.append(tld)

    # look for a whois server in iana with a different or no server in the list
    if not w or w == "NULL":
        # we can create a privateRegistry when there is no whois server
        if tld not in tld_regexpr.ZZ:
            print(f'ZZ["{tld}"] = ' + '{"_privateRegistry": True} # no whois server found in iana')
        return

    if tld not in tld_regexpr.ZZ:
        print(f"# unknown tld {tld}, {tld2}, {tld3}, {tld4}, {w},")
        return

    k = "_server"
    s1 = ""

    TLD = tld_regexpr.ZZ[tld]
    if k in TLD:
        s1 = TLD[k]

    if "whois.centralnicregistry.com." in resolve and _doCentralNic(tld, s1, w, TLD):
        return

    if "whois.donuts.co" in resolve and _doCentralNic(tld, s1, w, TLD):
        return

    try:
        tld3 = idna2.encode(tld3).decode() or tld3
    except Exception as e:
        print(f"## {tld} {tld2} {tld3} {e}")
        return

    tld4 = tld4.encode("idna").decode()
    if tld != tld2:
        if 0 and tld2 not in ss:
            print("# idna", tld, tld2, tld3, tld4, tld.encode("idna"))

    if tld != tld3:
        print(f"#SKIP {tld} {tld2} {tld3}")
        return

    if tld2 == tld and tld in tld_regexpr.ZZ:
        return

    if tld2 in tld_regexpr.ZZ and tld in tld_regexpr.ZZ:
        return

    if manager == "NULL":
        if tld not in tld_regexpr.ZZ:
            print(f'ZZ["{tld}"] = ' + '{"_privateRegistry": True}')

        if tld2 != tld:
            if tld2 not in tld_regexpr.ZZ:
                print(f'ZZ["{tld2}"] = ' + '{"_privateRegistry": True}')

        return

    found = False
    for key, value in MM.items():
        for n in value:
            if n in resolve:
                if tld not in tld_regexpr.ZZ:
                    print(f'ZZ["{tld}"] = ' + '{"_server": "' + n + '", "extend": "' + key + '"}')
                if tld2 != tld:
                    if tld2 not in tld_regexpr.ZZ:
                        print(f'ZZ["{tld2}"] = ' + '{"_server": "' + n + '", "extend": "' + key + '"}')
                found = True

            if found:
                break
        if found:
            break

    if found:
        return

    if reg == "NULL" and w == "NULL":
        return  # unclear,
        # we have existing ns records indicating some tld's actually exist
        # but have no whois, lets skip for now
        # TODO add ns records
        if tld not in tld_regexpr.ZZ:
            print(f'ZZ["{tld}"] = ' + '{"_privateRegistry": True}')

    if w == "NULL":
        return

    w = w.replace("'", "")
    if w in ss:
        if tld not in tld_regexpr.ZZ:
            print(
                f'ZZ["{tld}"] = ' + '{"_server": "' + w + '", "extend": "' + ss[w][0] + '"}',
                "# ",
                w,
                ss[w],
            )

        if tld2 != tld:
            if tld2 not in tld_regexpr.ZZ:
                print(
                    f'ZZ["{tld2}"] = ' + '{"_server": "' + w + '", "extend": "' + ss[w][0] + '"}',
                    "# ",
                    w,
                    ss[w],
                )
        return

    print("# MISSING", tld, tld2, tld3, manager.replace("\n", ";"), w, resolve, reg)


def xMain() -> None:
    verbose = False
    dbFileName = "IanaDb.sqlite"

    ss = extractServers(tld_regexpr.ZZ)
    allTld: List[str] = []

    iad = IanaDatabase(verbose=verbose)
    iad.connectDb(dbFileName)
    rr, cur = getAllDataTld(iad)

    for row in cur:
        doOneRow(row, allTld, ss)

    allTld = sorted(allTld)
    for tld in tld_regexpr.ZZ:
        if "." in tld:
            continue
        if "_" == tld[0]:
            continue

        try:
            tld2 = idna2.encode(tld).decode() or tld
        except Exception as e:
            print(f"{tld} {e} ", file=sys.stderr)
            tld2 = tld

        if tld not in allTld and tld2 not in allTld:
            print(f"# currently defined in ZZ but missing in iana: {tld}")


xMain()
